32362.25806451613
id="-gneE0_0"
waitingTime="0.00"
id="-gneE0_1"
waitingTime="0.00"
id="-gneE1_0"
waitingTime="0.00"
id="-gneE1_1"
waitingTime="0.00"
id="1_0"
waitingTime="60809.00"
id="1_1"
waitingTime="40128.00"
id="2_0"
waitingTime="10956.00"
id="2_1"
waitingTime="67735.00"
id="2_2"
waitingTime="49091.00"
id="3_0"
waitingTime="46230.00"
id="3_1"
waitingTime="19487.00"
id="3_2"
waitingTime="6250.00"
id="4_0"
waitingTime="57296.00"
id="4_1"
waitingTime="39151.00"
id="4_2"
waitingTime="8124.00"
id="7_0"
waitingTime="0.00"
id="7_1"
waitingTime="0.00"
id="8_0"
waitingTime="0.00"
id="8_1"
waitingTime="0.00"
id="gneE0_0"
waitingTime="47486.00"
id="gneE1_0"
waitingTime="48872.00"

id="-gneE0_0"
speed="12.45"
id="-gneE0_1"
speed="12.35"
id="-gneE1_0"
speed="12.37"
id="-gneE1_1"
speed="12.31"
id="1_0"
speed="2.02"
id="1_1"
speed="0.75"
id="2_0"
speed="4.31"
id="2_1"
speed="2.65"
id="2_2"
speed="0.79"
id="3_0"
speed="3.01"
id="3_1"
speed="1.23"
id="3_2"
speed="3.63"
id="4_0"
speed="3.08"
id="4_1"
speed="0.96"
id="4_2"
speed="2.66"
id="7_0"
speed="11.86"
id="7_1"
speed="12.46"
id="8_0"
speed="12.06"
id="8_1"
speed="12.31"
id="gneE0_0"
speed="1.98"
id="gneE1_0"
speed="1.82"

id="-gneE0_0"
density="5.04"
id="-gneE0_1"
density="4.37"
id="-gneE1_0"
density="2.69"
id="-gneE1_1"
density="5.02"
id="1_0"
density="27.26"
id="1_1"
density="15.26"
id="2_0"
density="9.56"
id="2_1"
density="27.42"
id="2_2"
density="15.76"
id="3_0"
density="23.02"
id="3_1"
density="7.29"
id="3_2"
density="3.14"
id="4_0"
density="28.47"
id="4_1"
density="13.63"
id="4_2"
density="3.36"
id="7_0"
density="5.80"
id="7_1"
density="3.14"
id="8_0"
density="7.19"
id="8_1"
density="6.43"
id="gneE0_0"
density="17.94"
id="gneE1_0"
density="19.87"

id="-gneE0_0"
occupancy="2.39"
id="-gneE0_1"
occupancy="2.07"
id="-gneE1_0"
occupancy="1.27"
id="-gneE1_1"
occupancy="2.38"
id="1_0"
occupancy="13.54"
id="1_1"
occupancy="7.56"
id="2_0"
occupancy="4.68"
id="2_1"
occupancy="13.61"
id="2_2"
occupancy="7.79"
id="3_0"
occupancy="11.38"
id="3_1"
occupancy="3.59"
id="3_2"
occupancy="1.53"
id="4_0"
occupancy="14.10"
id="4_1"
occupancy="6.72"
id="4_2"
occupancy="1.64"
id="7_0"
occupancy="2.72"
id="7_1"
occupancy="1.49"
id="8_0"
occupancy="3.40"
id="8_1"
occupancy="3.05"
id="gneE0_0"
occupancy="8.88"
id="gneE1_0"
occupancy="9.85"

Average Time-Loss between all vehicles: 35.122918636476804

Average Trip Duration: 49.776163224682755
What still needs to be done:

Queueing States for all: and 50% 25% 10% 5% and 1% Chunks

Round-a-bout doesn't work!!!!!

Find which vehicles belong to which lane and calculate the avareage time loss for each lane

Same but for trip duration instead

Then we will be finished!

We might want to convert queueing parser into C++ because PYTHON IS SOOO FRIKING SLOWWWW GAAAAAAAHHHHHHHHH

SORRY FOR DATA DELAY WHAT CAN I SAY I PROCRASTINATED

IM SO FAR BEHIND THIS SEMESTER

WELL THAT KIND OF HAPPENS EVERY SEMESTER

ALSO WE SHOULD FILL OUT THE CHART I MADE A WHILE AGO FOR THIS DATA I DIDN"T DO IT BECAUSE ITS TEDIOUS